g`"We look for an exact refreshrate at the lowest higher
resolution before searching for a suitable refreshrate at GUI resolution.
Also selects double refreshrate if available at correct res (fix
for change of mode 1-2 secs after video starts).

Incorporates changes to work 3D properly
---
 xbmc/windowing/Resolution.cpp | 58 ++++++++++++++++++++++++-----------
 1 file changed, 40 insertions(+), 18 deletions(-)

diff --git a/xbmc/windowing/Resolution.cpp b/xbmc/windowing/Resolution.cpp
index af36e6e5c8..b6dd216342 100644
--- a/xbmc/windowing/Resolution.cpp
+++ b/xbmc/windowing/Resolution.cpp
@@ -101,16 +101,17 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
   if (noWhiteList)
   {
     CLog::Log(LOGDEBUG,
-              "[WHITELIST] Using the default whitelist because the user whitelist is empty");
+              "[WHITELIST] Using the default whitelist because the user whitelist is empty");
     std::vector<RESOLUTION> candidates;
     RESOLUTION_INFO info;
     std::string resString;
     CServiceBroker::GetWinSystem()->GetGfxContext().GetAllowedResolutions(candidates);
     for (const auto& c : candidates)
     {
-      info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(c);
+      info = CDisplaySettings::GetInstance().GetResolutionInfo(c);
+      /* add all progressive 2D modes >= desktop */
       if (info.iScreenHeight >= curr.iScreenHeight && info.iScreenWidth >= curr.iScreenWidth &&
-          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK))
+         ! (info.dwFlags & D3DPRESENTFLAG_MODEMASK))
       {
         // do not add half refreshrates (25, 29.97 by default) as kodi cannot cope with
         // them on playback start. Especially interlaced content is not properly detected
@@ -133,13 +134,16 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
   for (const auto& mode : indexList)
   {
     auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
+
+    CLog::Log(LOGERROR, "** T99 ** %d/%d vs. %d/%d - %f vs. %f, flags: 0x%x",
+            width, height, info.iScreenWidth, info.iScreenHeight,
+            fps, info.fRefreshRate, info.dwFlags & D3DPRESENTFLAG_MODEMASK);
 
     // allow resolutions that are exact and have the correct refresh rate
     // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
     if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
          (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
         MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
     {
       CLog::Log(LOGDEBUG,
@@ -167,20 +171,19 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     for (const auto& mode : indexList)
     {
       auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+      const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
 
       // allow resolutions that are exact and have double the refresh rate
       // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
       if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
            (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
-          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
           MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.01f))
       {
         CLog::Log(LOGDEBUG,
                   "[WHITELIST] Matched an exact resolution with double the refresh rate {} ({})",
                   info.strMode, i);
         unsigned int pen = abs(info.iScreenHeight - height) + abs(info.iScreenWidth - width);
-        if (pen < penalty)
+        if (pen <= penalty)
         {
           resolution = i;
           found = true;
@@ -206,13 +209,12 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     for (const auto& mode : indexList)
     {
       auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+      const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
 
       // allow resolutions that are exact and have 2.5 times the refresh rate
       // allow macroblock alignement / padding errors (e.g. 1080 mod16 == 8)
       if (((height == info.iScreenHeight && width <= info.iScreenWidth + 8) ||
            (width == info.iScreenWidth && height <= info.iScreenHeight + 8)) &&
-          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
           MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.01f))
       {
         CLog::Log(
@@ -235,6 +237,31 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
   }
 
 
+  /* Prefer upscaling at the correct framerate if available and specifically whitelisted
+   * eg for displays with 2160p25/50 but no 1080p25/50
+   */
+  if (HasWhitelist())
+  {
+    CLog::Log(LOGDEBUG, "[WHITELIST] Searching for higher resolutions with the exact refreshrate");
+    for (const auto& mode : indexList)
+    {
+      auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
+      const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
+
+      // pick the lowest resolution that has a matching refresh rate
+      if ((info.iScreenHeight >= height || info.iScreenWidth >= width) &&
+        ! (info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
+          MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
+      {
+        resolution = i;
+        CLog::Log(LOGDEBUG, "[WHITELIST] Matched fuzzy whitelisted Resolution %s (%d)", info.strMode.c_str(), i);
+        return;
+      }
+    }
+  }
+
+
+  CLog::Log(LOGDEBUG, "[WHITELIST] No match for a higher resolution with an exact refresh rate");
   CLog::Log(LOGDEBUG, "[WHITELIST] Searching for a desktop resolution with an exact refresh rate");
 
   const RESOLUTION_INFO desktop_info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(CDisplaySettings::GetInstance().GetCurrentResolution());
@@ -242,11 +269,10 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
   for (const auto& mode : indexList)
   {
     auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-    const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+    const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
 
     // allow resolutions that are desktop resolution but have the correct refresh rate
     if (info.iScreenWidth == desktop_info.iScreenWidth &&
-        (info.dwFlags & D3DPRESENTFLAG_MODEMASK) == (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
         MathUtils::FloatEquals(info.fRefreshRate, fps, 0.01f))
     {
       CLog::Log(LOGDEBUG,
@@ -268,12 +294,10 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     for (const auto& mode : indexList)
     {
       auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+      const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
 
       // allow resolutions that are desktop resolution but have double the refresh rate
       if (info.iScreenWidth == desktop_info.iScreenWidth &&
-          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) ==
-              (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
           MathUtils::FloatEquals(info.fRefreshRate, fps * 2, 0.01f))
       {
         CLog::Log(LOGDEBUG,
@@ -297,12 +321,10 @@ void CResolutionUtils::FindResolutionFromWhitelist(float fps, int width, int hei
     for (const auto& mode : indexList)
     {
       auto i = CDisplaySettings::GetInstance().GetResFromString(mode.asString());
-      const RESOLUTION_INFO info = CServiceBroker::GetWinSystem()->GetGfxContext().GetResInfo(i);
+      const RESOLUTION_INFO info = CDisplaySettings::GetInstance().GetResolutionInfo(i);
 
       // allow resolutions that are desktop resolution but have 2.5 times the refresh rate
       if (info.iScreenWidth == desktop_info.iScreenWidth &&
-          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) ==
-              (desktop_info.dwFlags & D3DPRESENTFLAG_MODEMASK) &&
           MathUtils::FloatEquals(info.fRefreshRate, fps * 2.5f, 0.01f))
       {
         CLog::Log(
-- 
2.25.1

