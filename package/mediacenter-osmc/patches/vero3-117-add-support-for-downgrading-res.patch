From ceacebd066da6ec4f51014e3034360246216565a Mon Sep 17 00:00:00 2001
From: "Chris \\\"Koying\\\" Browet" <cbro@semperpax.com>
Date: Sat, 2 Dec 2017 11:54:24 +0100
Subject: [PATCH 1/7] CHG: Allow to downgrade resolution

---
 xbmc/guilib/Resolution.cpp | 75 +++++++++++++++++-----------------------------
 1 file changed, 28 insertions(+), 47 deletions(-)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index 8c19be8..ea0fd2b 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -225,68 +225,49 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
       // concerning dimension and refreshrate weight
       // skip lower resolutions
       // don't change resolutions when 3D is wanted
-      if ((width < orig.iScreenWidth) || // orig res large enough
-         (info.iScreenWidth < orig.iScreenWidth) || // new res is smaller
-         (info.iScreenHeight < orig.iScreenHeight) || // new height would be smaller
+      if ((info.iScreenWidth < 1280) || // ignore < 720p
+         (info.iScreenHeight < 720) || // ignore < 720p
          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) != (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) || // don't switch to interlaced modes
-         (info.iScreen != curr.iScreen) || // skip not current displays
-         is3D) // skip res changing when doing 3D
+         (info.iScreen != curr.iScreen)) // skip not current displays
       {
         continue;
       }
     }
 
-    // Allow switching to larger resolution:
+    // Allow switching to a matching resolution:
     // e.g. if m_sourceWidth == 3840 and we have a 3840 mode - use this one
     // if it has a matching fps mode, which is evaluated below
 
     loop_diff = std::abs(width - info.iScreenWidth);
     curr_diff = std::abs(width - curr.iScreenWidth);
 
-    // For 3D choose the closest refresh rate
-    if (is3D)
-    {
-      float diff = (info.fRefreshRate - fRefreshRate);
-      if(diff < 0)
-        diff *= -1.0f;
+    int c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
+    int i_weight = MathUtils::round_int(RefreshWeight(info.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
 
-      if(diff < last_diff)
-      {
-        last_diff = diff;
-        current = (RESOLUTION)i;
-        curr = info;
-      }
+    RESOLUTION current_bak = current;
+    RESOLUTION_INFO curr_bak = curr;
+
+    // Closer the better, prefer higher refresh rate if the same
+    if ((i_weight < c_weight) ||
+        (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate))
+    {
+      current = (RESOLUTION)i;
+      curr = info;
     }
-    else
+    // use case 1080p50 vs 3840x2160@25 for 3840@25 content
+    // prefer the higher resolution of 3840
+    if (i_weight == c_weight && (loop_diff < curr_diff))
     {
-      int c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
-      int i_weight = MathUtils::round_int(RefreshWeight(info.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
-
-      RESOLUTION current_bak = current;
-      RESOLUTION_INFO curr_bak = curr;
-
-      // Closer the better, prefer higher refresh rate if the same
-      if ((i_weight < c_weight) ||
-          (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate))
-      {
-        current = (RESOLUTION)i;
-        curr = info;
-      }
-      // use case 1080p50 vs 3840x2160@25 for 3840@25 content
-      // prefer the higher resolution of 3840
-      if (i_weight == c_weight && (loop_diff < curr_diff))
-      {
-        current = (RESOLUTION)i;
-        curr = info;
-      }
-      // same as above but iterating with 3840@25 set and overwritten
-      // by e.g. 1080@50 - restore backup in that case
-      // to give priority to the better matching width
-      if (i_weight == c_weight && (loop_diff > curr_diff))
-      {
-        current = current_bak;
-        curr = curr_bak;
-      }
+      current = (RESOLUTION)i;
+      curr = info;
+    }
+    // same as above but iterating with 3840@25 set and overwritten
+    // by e.g. 1080@50 - restore backup in that case
+    // to give priority to the better matching width
+    if (i_weight == c_weight && (loop_diff > curr_diff))
+    {
+      current = current_bak;
+      curr = curr_bak;
     }
   }
 
-- 
2.7.4


From 7f1430aaf1cd9b35b3474ab4337a809e92c3612c Mon Sep 17 00:00:00 2001
From: "Chris \\\"Koying\\\" Browet" <cbro@semperpax.com>
Date: Sat, 2 Dec 2017 11:54:24 +0100
Subject: [PATCH 2/7] CHG: Allow to downgrade resolution

---
 xbmc/guilib/Resolution.cpp | 35 ++++++-----------------------------
 1 file changed, 6 insertions(+), 29 deletions(-)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index ea0fd2b..e11507e 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -203,9 +203,8 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
 
   float fRefreshRate = fps;
 
-  float last_diff = fRefreshRate;
-
   int curr_diff = std::abs(width - curr.iScreenWidth);
+  int c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
   int loop_diff = 0;
 
   // Find closest refresh rate
@@ -239,43 +238,21 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
     // if it has a matching fps mode, which is evaluated below
 
     loop_diff = std::abs(width - info.iScreenWidth);
-    curr_diff = std::abs(width - curr.iScreenWidth);
-
-    int c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
     int i_weight = MathUtils::round_int(RefreshWeight(info.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
 
-    RESOLUTION current_bak = current;
-    RESOLUTION_INFO curr_bak = curr;
-
     // Closer the better, prefer higher refresh rate if the same
     if ((i_weight < c_weight) ||
-        (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate))
-    {
-      current = (RESOLUTION)i;
-      curr = info;
-    }
-    // use case 1080p50 vs 3840x2160@25 for 3840@25 content
-    // prefer the higher resolution of 3840
-    if (i_weight == c_weight && (loop_diff < curr_diff))
+        (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate) ||
+        (i_weight == c_weight && info.fRefreshRate == curr.fRefreshRate && loop_diff < curr_diff))
     {
       current = (RESOLUTION)i;
       curr = info;
-    }
-    // same as above but iterating with 3840@25 set and overwritten
-    // by e.g. 1080@50 - restore backup in that case
-    // to give priority to the better matching width
-    if (i_weight == c_weight && (loop_diff > curr_diff))
-    {
-      current = current_bak;
-      curr = curr_bak;
+      curr_diff = std::abs(width - curr.iScreenWidth);
+      c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
     }
   }
 
-  // For 3D overwrite weight
-  if (is3D)
-    weight = 0;
-  else
-    weight = RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier);
+  weight = c_weight;
 
   return current;
 }
-- 
2.7.4


From 53fd14e9ed96c1b63a93170103718140cc1e6946 Mon Sep 17 00:00:00 2001
From: "Chris \\\"Koying\\\" Browet" <cbro@semperpax.com>
Date: Mon, 4 Dec 2017 10:49:42 +0100
Subject: [PATCH 3/7] FIXUP: [reso down] 2160p25 vs 1080p50 on HDMI 1.4

---
 xbmc/guilib/Resolution.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index e11507e..5138931 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -242,7 +242,7 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
 
     // Closer the better, prefer higher refresh rate if the same
     if ((i_weight < c_weight) ||
-        (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate) ||
+        (i_weight == c_weight && info.fRefreshRate > curr.fRefreshRate && loop_diff <= curr_diff) ||
         (i_weight == c_weight && info.fRefreshRate == curr.fRefreshRate && loop_diff < curr_diff))
     {
       current = (RESOLUTION)i;
-- 
2.7.4


From 19c9cf4e17d8e125844dd21394e63a69b42f8cd6 Mon Sep 17 00:00:00 2001
From: "Chris \\\"Koying\\\" Browet" <cbro@semperpax.com>
Date: Sat, 9 Dec 2017 21:37:40 +0100
Subject: [PATCH 4/7] FIXUP: [reso switcher] don't allow downgrades

---
 xbmc/guilib/Resolution.cpp | 21 ++++++++++++---------
 1 file changed, 12 insertions(+), 9 deletions(-)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index 5138931..d5466ce 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -194,16 +194,13 @@ void CResolutionUtils::FindResolutionFromFpsMatch(float fps, int width, bool is3
 RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is3D, float multiplier, RESOLUTION current, float& weight)
 {
   RESOLUTION_INFO curr = g_graphicsContext.GetResInfo(current);
-  RESOLUTION orig_res  = CDisplaySettings::GetInstance().GetCurrentResolution();
-
-  if (orig_res <= RES_DESKTOP)
-    orig_res = RES_DESKTOP;
-
-  RESOLUTION_INFO orig = g_graphicsContext.GetResInfo(orig_res);
 
   float fRefreshRate = fps;
 
-  int curr_diff = std::abs(width - curr.iScreenWidth);
+  int curr_diff = curr.iScreenWidth - width;
+  if (curr_diff < 0)
+    curr_diff = INT_MAX;
+
   int c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
   int loop_diff = 0;
 
@@ -237,7 +234,13 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
     // e.g. if m_sourceWidth == 3840 and we have a 3840 mode - use this one
     // if it has a matching fps mode, which is evaluated below
 
-    loop_diff = std::abs(width - info.iScreenWidth);
+    loop_diff = info.iScreenWidth - width;
+    if (loop_diff < 0)
+    {
+      // Do not allow downscaling
+      continue;
+    }
+
     int i_weight = MathUtils::round_int(RefreshWeight(info.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
 
     // Closer the better, prefer higher refresh rate if the same
@@ -247,7 +250,7 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
     {
       current = (RESOLUTION)i;
       curr = info;
-      curr_diff = std::abs(width - curr.iScreenWidth);
+      curr_diff = loop_diff;
       c_weight = MathUtils::round_int(RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier) * 10000.0);
     }
   }
-- 
2.7.4


From b8756e8fb30e3f4966974a51c4c0806ebd474f3a Mon Sep 17 00:00:00 2001
From: "Chris \\\"Koying\\\" Browet" <cbro@semperpax.com>
Date: Wed, 13 Dec 2017 19:33:18 +0100
Subject: [PATCH 5/7] FIXUP: [reso switcher] proper weight

---
 xbmc/guilib/Resolution.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index d5466ce..4cbffeb 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -255,7 +255,7 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
     }
   }
 
-  weight = c_weight;
+  weight = RefreshWeight(curr.fRefreshRate, fRefreshRate * multiplier);
 
   return current;
 }
-- 
2.7.4


From c74b24883a85874f27e215556b869c40c2d9d165 Mon Sep 17 00:00:00 2001
From: Chris Koying Browet <cbro@semperpax.com>
Date: Fri, 15 Dec 2017 16:27:38 +0100
Subject: [PATCH 6/7] FIXUP: [down reso] setting to allow reso change

---
 addons/resource.language.en_gb/resources/strings.po |  8 ++++++++
 system/settings/settings.xml                        |  5 +++++
 xbmc/guilib/Resolution.cpp                          | 10 +++++++---
 xbmc/settings/Settings.cpp                          |  1 +
 xbmc/settings/Settings.h                            |  1 +
 5 files changed, 22 insertions(+), 3 deletions(-)

diff --git a/addons/resource.language.en_gb/resources/strings.po b/addons/resource.language.en_gb/resources/strings.po
index e04ee65..fb0b04d 100644
--- a/addons/resource.language.en_gb/resources/strings.po
+++ b/addons/resource.language.en_gb/resources/strings.po
@@ -19848,3 +19848,11 @@ msgctxt "#39013"
 msgid "Turns off HDMI audio. Useful if you're using SPDIF audio and don't want audio on HDMI. Requires reboot."
 msgstr ""
 
+msgctxt "#39110"
+msgid "Also allow resolution switch"
+msgstr ""
+
+msgctxt "#39111"
+msgid "Allow also the resolution to be adjusted to closely match the source material"
+msgstr ""
+
diff --git a/system/settings/settings.xml b/system/settings/settings.xml
index 344cdb8..29035eb 100644
--- a/system/settings/settings.xml
+++ b/system/settings/settings.xml
@@ -46,6 +46,11 @@
           </constraints>
           <control type="list" format="string" />
         </setting>
+        <setting id="videoplayer.adjustresolution" type="boolean" label="39110" help="39111">
+          <level>2</level>
+          <default>false</default>
+          <control type="toggle" />
+        </setting>
         <setting id="videoplayer.usedisplayasclock" type="boolean" label="13510" help="36166">
           <level>1</level>
           <default>false</default>
diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index 4cbffeb..22269ef 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -23,6 +23,7 @@
 #include "utils/log.h"
 #include "utils/MathUtils.h"
 #include "settings/AdvancedSettings.h"
+#include "settings/Settings.h"
 #include "settings/DisplaySettings.h"
 #include <cstdlib>
 
@@ -194,7 +195,7 @@ void CResolutionUtils::FindResolutionFromFpsMatch(float fps, int width, bool is3
 RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is3D, float multiplier, RESOLUTION current, float& weight)
 {
   RESOLUTION_INFO curr = g_graphicsContext.GetResInfo(current);
-
+  bool adjustReso = CSettings::GetInstance().GetBool(CSettings::SETTING_VIDEOPLAYER_ADJUSTRESOLUTION);
   float fRefreshRate = fps;
 
   int curr_diff = curr.iScreenWidth - width;
@@ -217,6 +218,11 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
         (info.dwFlags & D3DPRESENTFLAG_MODEMASK) != (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) ||
         info.fRefreshRate < (fRefreshRate * multiplier / 1.001) - 0.001)
     {
+      // If not allowed to switch reso, ignore the ones
+      // not equal to the current one
+      if (!adjustReso && (info.iScreenWidth != curr.iScreenWidth || info.iScreenHeight != curr.iScreenHeight))
+        continue;
+
       // evaluate all higher modes and evalute them
       // concerning dimension and refreshrate weight
       // skip lower resolutions
@@ -225,9 +231,7 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
          (info.iScreenHeight < 720) || // ignore < 720p
          (info.dwFlags & D3DPRESENTFLAG_MODEMASK) != (curr.dwFlags & D3DPRESENTFLAG_MODEMASK) || // don't switch to interlaced modes
          (info.iScreen != curr.iScreen)) // skip not current displays
-      {
         continue;
-      }
     }
 
     // Allow switching to a matching resolution:
diff --git a/xbmc/settings/Settings.cpp b/xbmc/settings/Settings.cpp
index 72098b5..4659c40 100644
--- a/xbmc/settings/Settings.cpp
+++ b/xbmc/settings/Settings.cpp
@@ -149,6 +149,7 @@ const std::string CSettings::SETTING_VIDEOPLAYER_AUTOPLAYNEXTITEM = "videoplayer
 const std::string CSettings::SETTING_VIDEOPLAYER_SEEKSTEPS = "videoplayer.seeksteps";
 const std::string CSettings::SETTING_VIDEOPLAYER_SEEKDELAY = "videoplayer.seekdelay";
 const std::string CSettings::SETTING_VIDEOPLAYER_ADJUSTREFRESHRATE = "videoplayer.adjustrefreshrate";
+const std::string CSettings::SETTING_VIDEOPLAYER_ADJUSTRESOLUTION = "videoplayer.adjustresolution";
 const std::string CSettings::SETTING_VIDEOPLAYER_USEDISPLAYASCLOCK = "videoplayer.usedisplayasclock";
 const std::string CSettings::SETTING_VIDEOPLAYER_ERRORINASPECT = "videoplayer.errorinaspect";
 const std::string CSettings::SETTING_VIDEOPLAYER_STRETCH43 = "videoplayer.stretch43";
diff --git a/xbmc/settings/Settings.h b/xbmc/settings/Settings.h
index 439b2b4..90a8fa3 100644
--- a/xbmc/settings/Settings.h
+++ b/xbmc/settings/Settings.h
@@ -105,6 +105,7 @@ public:
   static const std::string SETTING_VIDEOPLAYER_SEEKSTEPS;
   static const std::string SETTING_VIDEOPLAYER_SEEKDELAY;
   static const std::string SETTING_VIDEOPLAYER_ADJUSTREFRESHRATE;
+  static const std::string SETTING_VIDEOPLAYER_ADJUSTRESOLUTION;
   static const std::string SETTING_VIDEOPLAYER_USEDISPLAYASCLOCK;
   static const std::string SETTING_VIDEOPLAYER_ERRORINASPECT;
   static const std::string SETTING_VIDEOPLAYER_STRETCH43;
-- 
2.7.4


From bd5a9e5f4283495e6de5b2dab2cdf4d6c70c4fa6 Mon Sep 17 00:00:00 2001
From: Chris Koying Browet <cbro@semperpax.com>
Date: Fri, 15 Dec 2017 16:28:47 +0100
Subject: [PATCH 7/7] FIXUP: [down reso] only consider 1080p for 3D

---
 xbmc/guilib/Resolution.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/xbmc/guilib/Resolution.cpp b/xbmc/guilib/Resolution.cpp
index 22269ef..3fac916 100644
--- a/xbmc/guilib/Resolution.cpp
+++ b/xbmc/guilib/Resolution.cpp
@@ -223,6 +223,10 @@ RESOLUTION CResolutionUtils::FindClosestResolution(float fps, int width, bool is
       if (!adjustReso && (info.iScreenWidth != curr.iScreenWidth || info.iScreenHeight != curr.iScreenHeight))
         continue;
 
+      // If 3D, only consider 1080p
+      if (is3D && (info.iScreenWidth != 1920 || info.iScreenHeight != 1080))
+        continue;
+
       // evaluate all higher modes and evalute them
       // concerning dimension and refreshrate weight
       // skip lower resolutions
-- 
2.7.4

