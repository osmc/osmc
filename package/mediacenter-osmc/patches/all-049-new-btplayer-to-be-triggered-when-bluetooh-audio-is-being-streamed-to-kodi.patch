From 9aa7e83b9e6bc369b9e3b4532f75abc5e08199d9 Mon Sep 17 00:00:00 2001
From: Gerald Barker <gezb@users.noreply.github.com>
Date: Sat, 9 Jan 2016 22:44:20 +0000
Subject: [PATCH] New BTPlayer to be triggered when bluetooth audio is
 streamed to Kodi

---
 Makefile.in                                        |   1 +
 configure.ac                                       |   1 +
 xbmc/cores/btplayer/BTPlayer.cpp                   | 211 +++++++++++++++++++++
 xbmc/cores/btplayer/BTPlayer.h                     | 116 +++++++++++
 xbmc/cores/btplayer/Makefile.in                    |   9 +
 xbmc/cores/playercorefactory/PlayerCoreConfig.h    |   2 +
 xbmc/cores/playercorefactory/PlayerCoreFactory.cpp |   6 +
 xbmc/cores/playercorefactory/PlayerCoreFactory.h   |   1 +
 8 files changed, 347 insertions(+)
 create mode 100644 xbmc/cores/btplayer/BTPlayer.cpp
 create mode 100644 xbmc/cores/btplayer/BTPlayer.h
 create mode 100644 xbmc/cores/btplayer/Makefile.in

diff --git a/Makefile.in b/Makefile.in
index c858252..2e166b4 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -39,6 +39,7 @@ DIRECTORY_ARCHIVES=$(DVDPLAYER_ARCHIVES) \
                    xbmc/cores/VideoRenderers/VideoShaders/VideoShaders.a \
                    xbmc/cores/cores.a \
                    xbmc/cores/paplayer/paplayer.a \
+                   xbmc/cores/btplayer/btplayer.a \
                    xbmc/cores/playercorefactory/playercorefactory.a \
                    xbmc/dbwrappers/dbwrappers.a \
                    xbmc/dialogs/dialogs.a \
diff --git a/configure.ac b/configure.ac
index 4e125e5..35819ed 100644
--- a/configure.ac
+++ b/configure.ac
@@ -2367,6 +2367,7 @@ OUTPUT_FILES="Makefile \
     xbmc/cores/paplayer/Makefile \
     xbmc/cores/omxplayer/Makefile \
     xbmc/cores/playercorefactory/Makefile \
+    xbmc/cores/btplayer/Makefile \
     xbmc/messaging/Makefile \
     xbmc/messaging/helpers/Makefile \
     xbmc/osx/Makefile \
diff --git a/xbmc/cores/btplayer/BTPlayer.cpp b/xbmc/cores/btplayer/BTPlayer.cpp
new file mode 100644
index 0000000..5298604
--- /dev/null
+++ b/xbmc/cores/btplayer/BTPlayer.cpp
@@ -0,0 +1,211 @@
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "BTPlayer.h"
+#include "FileItem.h"
+#include "settings/AdvancedSettings.h"
+#include "settings/Settings.h"
+#include "music/tags/MusicInfoTag.h"
+#include "utils/log.h"
+#include "utils/JobManager.h"
+#include "messaging/ApplicationMessenger.h"
+#include "cores/AudioEngine/AEFactory.h"
+#include "cores/AudioEngine/Utils/AEUtil.h"
+#include "cores/AudioEngine/Interfaces/AEStream.h"
+#include "cores/DataCacheCore.h"
+#include <unistd.h>
+
+class CQueueNextFileJob : public CJob
+{
+  CFileItem m_item;
+  BTPlayer &m_player;
+
+public:
+  CQueueNextFileJob(const CFileItem& item, BTPlayer &player)
+    : m_item(item), m_player(player) {}
+  virtual       ~CQueueNextFileJob() {}
+  virtual bool  DoWork()
+  {
+    return true;
+  }
+};
+
+// BTPlayer: Bluetooth Player
+// A dummy player that lets Pulse and Kodi be friends without hassle
+
+
+BTPlayer::BTPlayer(IPlayerCallback& callback) :
+  IPlayer              (callback),
+  CThread              ("BTPlayer"),
+  m_signalSpeedChange  (false),
+  m_playbackSpeed      (1    ),
+  m_isPlaying          (false),
+  m_isPaused           (false),
+  m_isFinished         (false),
+  m_defaultCrossfadeMS (0),
+  m_upcomingCrossfadeMS(0),
+  m_audioCallback      (NULL ),
+  m_FileItem           (new CFileItem()),
+  m_jobCounter         (0),
+  m_continueStream     (false),
+  m_bStop              (false)
+{
+  memset(&m_playerGUIData, 0, sizeof(m_playerGUIData));
+}
+
+BTPlayer::~BTPlayer()
+{
+  CloseFile();
+  delete m_FileItem;
+}
+
+bool BTPlayer::OpenFile(const CFileItem& file, const CPlayerOptions &options)
+{
+  CLog::Log(LOGDEBUG, "BTPlayer::OpenFile");
+  StopThread();
+  m_isPaused = false;
+
+  CSharedLock lock(m_streamsLock);
+  // Lock AudioEngine so external application can enjoy its time with the sink
+  CAEFactory::Suspend();
+  lock.Leave();
+  if (!IsRunning())
+    Create();
+
+  /* trigger playback start */
+  m_isPlaying = true;
+  m_startEvent.Set();
+  return true;
+}
+
+bool BTPlayer::QueueNextFile(const CFileItem &file)
+{
+    CLog::Log(LOGDEBUG, "BTPlayer::QueueNextFile");
+  {
+    CExclusiveLock lock(m_streamsLock);
+    m_jobCounter++;
+  }
+  return true;
+}
+
+bool BTPlayer::CloseFile(bool reopen)
+{
+  CLog::Log(LOGDEBUG, "BTPlayer::CloseFile");
+  m_bStop = true;
+  StopThread(true);
+  CSharedLock lock(m_streamsLock);
+  while (m_jobCounter > 0)
+    {
+      lock.Leave();
+      m_jobEvent.WaitMSec(100);
+      lock.Enter();
+    }
+  CAEFactory::Resume();
+  return true;
+}
+
+void BTPlayer::Process()
+{
+  m_isPlaying = true;
+  if (!m_startEvent.WaitMSec(100))
+    {
+      CLog::Log(LOGDEBUG, "BTPlayer::Process - Failed to receive start event");
+      return;
+    }
+  m_callback.OnPlayBackStarted();
+  CLog::Log(LOGDEBUG, "BTPlayer::Process - Playback started");
+  while(m_isPlaying && !m_bStop)
+  {
+    usleep(2000);
+  }
+  m_callback.OnPlayBackStopped();
+}
+
+void BTPlayer::OnExit()
+{
+
+}
+
+void BTPlayer::RegisterAudioCallback(IAudioCallback* pCallback)
+{
+  CSharedLock lock(m_streamsLock);
+  m_audioCallback = pCallback;
+}
+
+void BTPlayer::UnRegisterAudioCallback()
+{
+  CSharedLock lock(m_streamsLock);
+  m_audioCallback = NULL;
+}
+
+void BTPlayer::OnNothingToQueueNotify()
+{
+  m_isFinished = true;
+}
+
+bool BTPlayer::IsPlaying() const
+{
+  return m_isPlaying;
+}
+
+bool BTPlayer::IsPaused() const
+{
+  return m_isPaused;
+}
+
+int64_t BTPlayer::GetTimeInternal()
+{
+  return 0;
+}
+
+int64_t BTPlayer::GetTime()
+{
+  return m_playerGUIData.m_time;
+}
+
+int64_t BTPlayer::GetTotalTime()
+{
+  return m_playerGUIData.m_totalTime;
+}
+
+int BTPlayer::GetCacheLevel() const
+{
+  return m_playerGUIData.m_cacheLevel;
+}
+
+void BTPlayer::GetAudioStreamInfo(int index, SPlayerAudioStreamInfo &info)
+{
+  info.bitrate = m_playerGUIData.m_audioBitrate;
+  info.channels = m_playerGUIData.m_channelCount;
+  info.audioCodecName = m_playerGUIData.m_codec;
+  info.samplerate = m_playerGUIData.m_sampleRate;
+  info.bitspersample = m_playerGUIData.m_bitsPerSample;
+}
+
+void BTPlayer::OnJobComplete(unsigned int jobID, bool success, CJob *job)
+{
+  CExclusiveLock lock(m_streamsLock);
+  m_jobCounter--;
+  m_jobEvent.Set();
+}
+
+void BTPlayer::Seek(bool bPlus, bool bLargeStep, bool bChapterOverride)
+{
+}
diff --git a/xbmc/cores/btplayer/BTPlayer.h b/xbmc/cores/btplayer/BTPlayer.h
new file mode 100644
index 0000000..8fe4ddd
--- /dev/null
+++ b/xbmc/cores/btplayer/BTPlayer.h
@@ -0,0 +1,116 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2005-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include <list>
+
+#include "cores/IPlayer.h"
+#include "threads/Thread.h"
+#include "threads/SharedSection.h"
+#include "utils/Job.h"
+
+#include "cores/IAudioCallback.h"
+#include "cores/AudioEngine/Utils/AEChannelInfo.h"
+
+class IAEStream;
+
+class CFileItem;
+class BTPlayer : public IPlayer, public CThread, public IJobCallback
+{
+  friend class CQueueNextFileJob;
+ public:
+  BTPlayer(IPlayerCallback& callback);
+  virtual ~BTPlayer();
+
+  virtual void RegisterAudioCallback(IAudioCallback* pCallback);
+  virtual void UnRegisterAudioCallback();
+  virtual bool OpenFile(const CFileItem& file, const CPlayerOptions &options);
+  virtual bool QueueNextFile(const CFileItem &file);
+  virtual void OnNothingToQueueNotify();
+  virtual bool CloseFile(bool reopen = false);
+  virtual bool IsPlaying() const;
+  virtual void Pause() { return; }
+  virtual bool IsPaused() const;
+  virtual bool HasVideo() const { return false; }
+  virtual bool HasAudio() const { return true; }
+  virtual bool CanSeek() const { return false; }
+  virtual void Seek(bool bPlus = true, bool bLargeStep = false, bool bChapterOverride = false);
+  virtual void SeekPercentage(float fPercent = 0.0f) { return; }
+  virtual float GetPercentage() const { return 0.0f; }
+  virtual void SetVolume(float volume) { return; }
+  virtual void SetDynamicRangeCompression(long drc) { return; }
+  virtual void GetAudioInfo( std::string& strAudioInfo) {}
+  virtual void GetVideoInfo( std::string& strVideoInfo) {}
+  virtual void GetGeneralInfo( std::string& strVideoInfo) {}
+  virtual void ToFFRW(int iSpeed = 0) { return; }
+  virtual int GetCacheLevel() const;
+  virtual int64_t GetTotalTime();
+  virtual void GetAudioStreamInfo(int index, SPlayerAudioStreamInfo &info);
+  virtual int64_t GetTime();
+  virtual void SeekTime() const { return; }
+  virtual bool SkipNext() const { return false; }
+  virtual void GetAudioCapabilities(std::vector<int> &audioCaps) {}
+
+  static bool HandlesType(const std::string &type) { return true; }
+
+  virtual void OnJobComplete(unsigned int jobID, bool success, CJob *job);
+
+    struct
+    {
+      char         m_codec[21];
+      int64_t      m_time;
+      int64_t      m_totalTime;
+      int          m_channelCount;
+      int          m_bitsPerSample;
+      int          m_sampleRate;
+      int          m_audioBitrate;
+      int          m_cacheLevel;
+      bool         m_canSeek;
+    } m_playerGUIData;
+
+ protected:
+    virtual void OnStartup() {}
+    virtual void Process();
+    virtual void OnExit();
+
+ private:
+
+    bool                m_signalSpeedChange;   /* true if OnPlaybackSpeedChange needs to be called */
+    int                 m_playbackSpeed;       /* the playback speed (1 = normal) */
+    bool                m_isPlaying;
+    bool                m_isPaused;
+    bool                m_isFinished;          /* if there are no more songs in the queue */
+    unsigned int        m_defaultCrossfadeMS;  /* how long the default crossfade is in ms */
+    unsigned int        m_upcomingCrossfadeMS; /* how long the upcoming crossfade is in ms */
+    CEvent              m_startEvent;          /* event for playback start */
+    IAudioCallback*     m_audioCallback;       /* the viz audio callback */
+
+    CFileItem*          m_FileItem;            /* our queued file or current file if no file is queued */
+
+    CSharedSection      m_streamsLock;         /* lock for the stream list */
+    int                 m_jobCounter;
+    CEvent              m_jobEvent;
+    bool                m_continueStream;
+    bool                m_bStop;
+    int64_t GetTotalTime64();
+    int64_t GetTimeInternal();
+};
+
diff --git a/xbmc/cores/btplayer/Makefile.in b/xbmc/cores/btplayer/Makefile.in
new file mode 100644
index 0000000..cc5ffd7
--- /dev/null
+++ b/xbmc/cores/btplayer/Makefile.in
@@ -0,0 +1,9 @@
+CXXFLAGS+=-D__STDC_FORMAT_MACROS
+
+
+SRCS  = BTPlayer.cpp
+
+LIB = btplayer.a
+
+include @abs_top_srcdir@/Makefile.include
+-include $(patsubst %.cpp,%.P,$(patsubst %.c,%.P,$(SRCS)))
diff --git a/xbmc/cores/playercorefactory/PlayerCoreConfig.h b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
index a13fe3a..d66df87 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreConfig.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreConfig.h
@@ -29,6 +29,7 @@
 #include "network/upnp/UPnPPlayer.h"
 #endif
 #include "utils/log.h"
+#include "cores/btplayer/BTPlayer.h"
 
 class CPlayerCoreConfig
 {
@@ -100,6 +101,7 @@ public:
 #if defined(HAS_UPNP)
       case EPC_UPNPPLAYER: pPlayer = new UPNP::CUPnPPlayer(callback, m_id.c_str()); break;
 #endif
+      case EPC_BTPLAYER: pPlayer  =  new BTPlayer(callback); break;
       default: return NULL;
     }
 
diff --git a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
index 4a6c8a8..6d658f7 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
+++ b/xbmc/cores/playercorefactory/PlayerCoreFactory.cpp
@@ -332,6 +332,11 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
     paplayer->m_bPlaysAudio = true;
     m_vecCoreConfigs.push_back(paplayer);
 
+    CPlayerCoreConfig* btplayer = new CPlayerCoreConfig("BTPLayer", EPC_BTPLAYER, NULL);
+    btplayer->m_bPlaysAudio = true;
+    btplayer->m_bPlaysVideo = false;
+    m_vecCoreConfigs.push_back(btplayer);
+
     for(std::vector<CPlayerSelectionRule *>::iterator it = m_vecCoreSelectionRules.begin(); it != m_vecCoreSelectionRules.end(); ++it)
       delete *it;
     m_vecCoreSelectionRules.clear();
@@ -358,6 +363,7 @@ bool CPlayerCoreFactory::LoadConfiguration(const std::string &file, bool clear)
       if (type == "dvdplayer" || type == "mplayer") eCore = EPC_DVDPLAYER;
       if (type == "paplayer" ) eCore = EPC_PAPLAYER;
       if (type == "externalplayer" ) eCore = EPC_EXTPLAYER;
+      if (type == "btplayer" ) eCore = EPC_BTPLAYER;
 
       if (eCore != EPC_NONE)
       {
diff --git a/xbmc/cores/playercorefactory/PlayerCoreFactory.h b/xbmc/cores/playercorefactory/PlayerCoreFactory.h
index 0e79f5c..63533ef 100644
--- a/xbmc/cores/playercorefactory/PlayerCoreFactory.h
+++ b/xbmc/cores/playercorefactory/PlayerCoreFactory.h
@@ -46,6 +46,7 @@ enum EPLAYERCORES
   EPC_PAPLAYER,
   EPC_EXTPLAYER,
   EPC_UPNPPLAYER,
+  EPC_BTPLAYER,
 };
 
 typedef unsigned int PLAYERCOREID;
-- 
2.1.4

