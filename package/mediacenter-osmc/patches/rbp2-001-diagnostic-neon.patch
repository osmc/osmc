diff --git a/xbmc/utils/CPUInfo.cpp b/xbmc/utils/CPUInfo.cpp
index 71aa745..6e65afe 100644
--- a/xbmc/utils/CPUInfo.cpp
+++ b/xbmc/utils/CPUInfo.cpp
@@ -102,6 +102,14 @@ using namespace std;
 
 CCPUInfo::CCPUInfo(void)
 {
+#ifdef __ARM_NEON__
+CLog::Log(LOGINFO, "ARM definition is valid");
+#endif
+#ifdef TARGET_LINUX
+CLog::Log(LOGINFO, "LINUX definition is valid");
+#endif
+CLog::Log(LOGINFO, "Definition checks done");
+
 #ifdef TARGET_POSIX
   m_fProcStat = m_fProcTemperature = m_fCPUFreq = NULL;
   m_cpuInfoForFreq = false;
@@ -928,6 +936,7 @@ bool CCPUInfo::HasNeon()
   has_neon = 1;
 
 #elif defined(TARGET_LINUX) && defined(__ARM_NEON__)
+CLog::Log(LOGINFO, "Checking for NEON inside ifdef");
   if (has_neon == -1)
   {
     has_neon = 0;
@@ -951,6 +960,28 @@ bool CCPUInfo::HasNeon()
 
 #endif
 
+  if (has_neon == -1)
+  {
+	CLog::Log(LOGINFO, "Checking for NEON outside ifdef");
+    has_neon = 0;
+    // why are we not looking at the Features in
+    // /proc/cpuinfo for neon ?
+    int fd = open("/proc/self/auxv", O_RDONLY);
+    if (fd >= 0)
+    {
+      Elf32_auxv_t auxv;
+      while (read(fd, &auxv, sizeof(Elf32_auxv_t)) == sizeof(Elf32_auxv_t))
+      {
+        if (auxv.a_type == AT_HWCAP)
+        {
+          has_neon = (auxv.a_un.a_val & HWCAP_NEON) ? 1 : 0;
+          break;
+        }
+      }
+      close(fd);
+    }
+  }
+
   return has_neon == 1;
 }
 
