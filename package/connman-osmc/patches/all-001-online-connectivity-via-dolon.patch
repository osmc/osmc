diff --git a/src/wispr.c b/src/wispr.c
index ef4bdab..aa504fa 100644
--- a/src/wispr.c
+++ b/src/wispr.c
@@ -30,8 +30,55 @@
 
 #include "connman.h"
 
-#define STATUS_URL_IPV4  "http://ipv4.connman.net/online/status.html"
-#define STATUS_URL_IPV6  "http://ipv6.connman.net/online/status.html"
+#include <string.h>
+#include <stdio.h>
+#include <unistd.h>
+
+#define STATUS_URL_IPV4 "http://osmc.tv/osmc/api/online"
+#define STATUS_URL_IPV6 "http://osmc.tv/osmc/api/online"
+
+int parse_option(const char *line, const char *option, char *value, size_t size)
+{
+    const char *p0, *p1;
+    int len;
+
+    p0 = strstr(line, option);
+    if (!p0)
+        return 0;
+    p0 += strlen(option);
+    p1  = strchr(p0, ' ');
+    if (!p1)
+       p1 = p0 + strlen(p0);
+    len = p1 - p0;
+    if (len > size - 1)
+        len = size - 1;
+    memcpy(value, p0, len);
+    value[len] = '\0';
+    return len;
+}
+
+void get_cmdline_option(const char *option, char *value, size_t size)
+{
+    FILE  *fp;
+    char  *line = NULL;
+    size_t len = 0;
+    size_t read;
+
+    if (!size)
+        return;
+    *value = '\0';
+    fp = fopen("/proc/cmdline", "r");
+    if (fp == NULL)
+         return;
+    while ((read = getline(&line, &len, fp)) != -1) {
+        if (parse_option(line, option, value, size))
+            break;
+    }
+    fclose(fp);
+    if (line)
+        free(line);
+    return;
+}
 
 struct connman_wispr_message {
 	bool has_error;
@@ -722,7 +769,7 @@ static bool wispr_portal_web_result(GWebResult *result, gpointer user_data)
 		if (wp_context->wispr_msg.message_type >= 0)
 			break;
 
-		if (g_web_result_get_header(result, "X-ConnMan-Status",
+		if (g_web_result_get_header(result, "x-osmc-status",
 						&str)) {
 			portal_manage_status(result, wp_context);
 			return false;
@@ -798,7 +845,61 @@ static void proxy_callback(const char *proxy, void *user_data)
 	}
 
 	g_web_set_accept(wp_context->web, NULL);
-	g_web_set_user_agent(wp_context->web, "ConnMan/%s wispr", VERSION);
+	/* Get the installed device */
+	char osmcdev[34];
+	get_cmdline_option("osmcdev=", osmcdev, sizeof(osmcdev));
+	/* Get the OS version */
+	FILE *fp = fopen("/etc/os-release", "r");
+	char *version;
+	if (fp)
+	{
+		char line[256];
+		while ((fgets(line, sizeof(line), fp) != NULL))
+		{
+			if (strstr(line, "VERSION_ID"))
+			{
+                        	char *it = NULL;
+                        	char *parsed_part;
+
+                        	strtok_r(line, "=", &it);
+                        	parsed_part = strtok_r(NULL, "=", &it);
+                        	version = strdup(parsed_part);
+				break;
+			}
+		}
+		fclose(fp);
+	}
+	/* Get system uptime */
+        fp = fopen("/proc/uptime", "r");
+        char *uptimeTotal;
+        char *uptimeIdle;
+        char uptimeLine[512];
+        if (fp)
+        {
+		char *parsed_part;
+		char *it;
+                fgets(uptimeLine, sizeof(uptimeLine), fp);
+		parsed_part = strtok_r(uptimeLine, " ", &it);
+		uptimeTotal = strdup(parsed_part);
+		parsed_part = strtok_r(NULL, " ", &it);
+		uptimeIdle = strdup(parsed_part);
+		fclose(fp);
+        }
+	int cpuCount = sysconf(_SC_NPROCESSORS_ONLN); /* Idle is calculated across all cores */
+        int uptimeIdleBalanced = atoi(uptimeTotal) / cpuCount;
+	asprintf(&uptimeIdle, "%d", uptimeIdleBalanced);
+
+	/* Get the UUID */
+	fp = fopen("/var/lib/dbus/machine-id", "r");
+        char uuid[34];
+        if (fp)
+        {
+                fgets(uuid, sizeof(uuid), fp);
+                fclose(fp);
+        }
+
+	/* Pass device, version, uptime total, uptime idle, UUID */
+	g_web_set_user_agent(wp_context->web, "%s %s %s %s %s", version, osmcdev, uptimeTotal, uptimeIdle, uuid);
 	g_web_set_close_connection(wp_context->web, TRUE);
 
 	connman_wispr_message_init(&wp_context->wispr_msg);
@@ -809,6 +910,11 @@ static void proxy_callback(const char *proxy, void *user_data)
 					xml_wispr_parser_callback, wp_context);
 
 	wispr_portal_request_portal(wp_context);
+
+	/* Clean up */
+	free(version);
+    	free(uptimeIdle);
+    	free(uptimeTotal);
 }
 
 static gboolean no_proxy_callback(gpointer user_data)
