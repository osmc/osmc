diff -Naur a/include/cectypes.h b/include/cectypes.h
--- a/include/cectypes.h	2016-10-30 15:36:30.593740078 +0000
+++ b/include/cectypes.h	2016-10-30 15:44:24.893006860 +0000
@@ -1495,7 +1495,7 @@
   uint32_t              iComboKeyTimeoutMs;   /*!< timeout until the combo key is sent as normal keypress */
   uint32_t              iButtonRepeatRateMs;  /*!< rate at which buttons autorepeat. 0 means rely on CEC device */
   uint32_t              iButtonReleaseDelayMs;/*!< duration after last update until a button is considered released */
-
+ uint8_t               bAutoWakeAVR;         /*!< set to 1 to automatically waking an AVR when the source is activated. */
 #ifdef __cplusplus
    libcec_configuration(void) { Clear(); }
   ~libcec_configuration(void) { Clear(); }
@@ -1531,6 +1531,7 @@
                  iDoubleTapTimeout50Ms     == other.iDoubleTapTimeout50Ms &&
                  iButtonRepeatRateMs       == other.iButtonRepeatRateMs &&
                  iButtonReleaseDelayMs     == other.iButtonReleaseDelayMs &&
+		 bAutoWakeAVR              == other.bAutoWakeAVR &&
                  (other.clientVersion <= LIBCEC_VERSION_TO_UINT(2, 0, 4) || comboKey            == other.comboKey) &&
                  (other.clientVersion <= LIBCEC_VERSION_TO_UINT(2, 0, 4) || iComboKeyTimeoutMs  == other.iComboKeyTimeoutMs) &&
                  (other.clientVersion <  LIBCEC_VERSION_TO_UINT(2, 1, 0) || bPowerOnScreensaver == other.bPowerOnScreensaver));
@@ -1573,7 +1574,7 @@
     iComboKeyTimeoutMs =              CEC_DEFAULT_COMBO_TIMEOUT_MS;
     iButtonRepeatRateMs =             0;
     iButtonReleaseDelayMs =           CEC_BUTTON_TIMEOUT;
-
+    bAutoWakeAVR =                    0;
     memset(strDeviceName, 0, 13);
     deviceTypes.Clear();
     logicalAddresses.Clear();
diff -Naur a/src/libcec/CECClient.cpp b/src/libcec/CECClient.cpp
--- a/src/libcec/CECClient.cpp	2016-10-30 14:13:18.401154326 +0000
+++ b/src/libcec/CECClient.cpp	2016-10-30 14:34:02.729468113 +0000
@@ -851,7 +851,7 @@
   configuration.iDoubleTapTimeout50Ms     = m_configuration.iDoubleTapTimeout50Ms;
   configuration.iButtonRepeatRateMs       = m_configuration.iButtonRepeatRateMs;
   configuration.iButtonReleaseDelayMs     = m_configuration.iButtonReleaseDelayMs;
-
+  configuration.bAutoWakeAVR              = m_configuration.bAutoWakeAVR;
   return true;
 }
 
@@ -896,7 +896,7 @@
     m_configuration.iDoubleTapTimeout50Ms      = configuration.iDoubleTapTimeout50Ms;
     m_configuration.iButtonRepeatRateMs        = configuration.iButtonRepeatRateMs;
     m_configuration.iButtonReleaseDelayMs      = configuration.iButtonReleaseDelayMs;
-
+    m_configuration.bAutoWakeAVR               = configuration.bAutoWakeAVR;
     m_configuration.deviceTypes.Add(configuration.deviceTypes[0]);
 
     if (m_configuration.clientVersion >= LIBCEC_VERSION_TO_UINT(2, 0, 5))
diff -Naur a/src/libcec/devices/CECBusDevice.cpp b/src/libcec/devices/CECBusDevice.cpp
--- a/src/libcec/devices/CECBusDevice.cpp	2016-10-30 14:20:39.740562756 +0000
+++ b/src/libcec/devices/CECBusDevice.cpp	2016-10-30 14:20:07.100606768 +0000
@@ -1023,8 +1023,9 @@
   bool bReturn(true);
   if (iDelay == 0)
   {
+    libcec_configuration config;
     /** send system audio mode request if AVR exists */
-    if (m_iLogicalAddress != CECDEVICE_AUDIOSYSTEM) 
+    if (m_iLogicalAddress != CECDEVICE_AUDIOSYSTEM && LIB_CEC->GetCurrentConfiguration(&config) && config.bAutoWakeAVR == 1) 
     {
       CCECBusDevice* audioSystem(m_processor->GetDevice(CECDEVICE_AUDIOSYSTEM));
       if (audioSystem && audioSystem->IsPresent())
